filter {
	if [type] == "ebegu" {
		# Wir merken uns das Original, da wir spaeter einige Parameter rausnehmen
		mutate {
			add_field => [ "original" , "%{message}" ]
		}
		if [source] == "ebegu" {
			grok {
				match => [ "message", "(?m)^%{TIMESTAMP_ISO8601:logDateTime} %{WORD:logSeverity} +\[%{DATA:logClassName}\] \(%{DATA:logThreadName}\)%{GREEDYDATA:message}" ]
				overwrite => [ "message" ]
				tag_on_failure => [ "_grokparsefailure_message_ebegu" ]
			}
			grok {
				match => [ "userId", "(?m)^%{TIMESTAMP_ISO8601:logDateTime} %{WORD:logSeverity} +\[%{DATA:logClassName}\] \(%{DATA:logThreadName}\)
					%{GREEDYDATA:message}" ]

			}
		}
		# Uns interessiert der @timestamp aus dem Logfile, nicht des Einlesens
		date {
			match => [ "logDateTime", "yyyy-MM-dd HH:mm:ss,SSS" ]
			timezone => "Europe/Zurich"
			tag_on_failure => [ "_grokparsefailure_logDateTime" ]
		}
		# Message: uns interessiert eigentlich nur die 1. Zeile von der Message, der Rest ist Stacktrace
		mutate {
			# Die Message wird zum Stacktrace
			rename => { "message" => "stacktrace" }
		}
		grok {
			# Die erste Zeile vom Stacktrace wird zur Message
			match => [ "stacktrace", "(?m)^%{DATA:message}$|\n" ]

			#Debugging-Hilfe:
			tag_on_failure => [ "_grokparsefailure_message_from_stacktrace" ]
		}
	}
}